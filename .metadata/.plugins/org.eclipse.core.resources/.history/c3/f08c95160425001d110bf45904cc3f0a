package com.cos.security1.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.cos.security1.config.auth.PrincipalDetails;
import com.cos.security1.model.User;
import com.cos.security1.repository.UserRepository;

@Controller
public class IndexController {
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@GetMapping({"/",""})
	public String index() {
		return "index";
	}
	
	@GetMapping("/user")
	@ResponseBody
	public String user() {
		return "user 페이지입니다.";
	}
	
	@GetMapping("/manager")
	@ResponseBody
	public String manager() {
		return "manager 페이지입니다.";
	}
	
	@GetMapping("/admin")
	@ResponseBody
	public String admin() {
		return "admin 페이지입니다.";
	}
	
	@GetMapping("/loginForm")
	public String loginForm() {
		return "login";
	}
	
	@GetMapping("/joinForm")
	public String joinForm() {
		return "join";
	}
	
	@PostMapping("/join")
	public String join(User user) {
		user.setRole("ROLE_USER");
		String oriPwd = user.getPassword();
		String encPwd = bCryptPasswordEncoder.encode(oriPwd);
		user.setPassword(encPwd);
		userRepository.save(user);
		return "redirect:/";
	}

	@Secured("ROLE_ADMIN")
	@GetMapping("/info")
	public @ResponseBody String info() {
		return "개인정보";
	}

	@PreAuthorize("hasRole('ROLE_MANAGER')")
	@GetMapping("/data")
	public @ResponseBody String data() {
		return "데이터정보";
	}

	@PreAuthorize("hasRole('ROLE_MANAGER') or hasRole('ROLE_ADMIN')")
	@GetMapping("/role")
	public @ResponseBody String role() {
		return "자격정보";
	}
	
//	google api console로 접속
//	Oauth 동의 화면과 사용자 인증정보 입력
//	사용자 인증정보 입력시 http://localhost:8080/login/oauth2/code/google 식으로 입력
//	http://localhost:8080 까지는 자유 
//	/login/oauth2/code 까지는 고정 --> 리다이렉트 url을 무조건 저런 형식으로 입력해야한다.
//	/google 까지는 자유
//	컨트롤러 메소드 생성은 필요없다.
//	@GetMapping("/login/oauth2/code/google")
//	public @ResponseBody String googleLogin() {
//		return "구글로그인";
//	}
	
	@GetMapping("/test/login")
	@ResponseBody
	public String testLogin(Authentication authentication) {
		System.out.println("/test/login=================================");
		PrincipalDetails principalDetails = (PrincipalDetails) authentication.getPrincipal();
		System.out.println("principalDetails : " + principalDetails.getUser());
		return "세션확인";
	}
}
